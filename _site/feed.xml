<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jesse Waites</title>
    <description>Jesse Waites - Boston based Rails / React Developer.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 25 Sep 2018 11:14:54 -0400</pubDate>
    <lastBuildDate>Tue, 25 Sep 2018 11:14:54 -0400</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Face Detection in HTML5 (Work in Progress)</title>
        <description>
</description>
        <pubDate>Wed, 23 May 2018 12:50:28 -0400</pubDate>
        <link>http://localhost:4000/HTML5-Face-Detection-Demo/</link>
        <guid isPermaLink="true">http://localhost:4000/HTML5-Face-Detection-Demo/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Implementing a GDPR EULA in a Ruby on Rails Application</title>
        <description>&lt;p&gt;As almost everyone has by now heard, the EU has passed some new consumer privacy
laws that go into effect later this week. There are a lot of new technical ramifications
of this, but this blog post specifically covers having existing and new users accept
our new GDPR End User Licence Agreement.&lt;/p&gt;

&lt;p&gt;When building a new feature, I like to think backwards from the end result of what
we want: At the end of the day, we need all users to accept the new terms. That means we need to display these new terms. If the users don’t agree, let’s assume they will no longer be able to use our service.&lt;/p&gt;

&lt;p&gt;I solved this by adding an uncloseable Popup modal on our logged-in homepage. You can make a bootstrap modal unable to be closed with:&lt;/p&gt;

&lt;p&gt;$(‘#myModal’).modal({backdrop: ‘static’, keyboard: false}) )&lt;/p&gt;

&lt;p&gt;Ok, so users are now locked out of the rest of the application and are forced to make a choice in the modal. So far, so good. The text of the new GDPR EULA is within the modal, as are two buttons: Accept, or Log Out. If they click “Log Out”, I sent them to the regular Devise “Log Out” path. So what happens if they click “Accept”?&lt;/p&gt;

&lt;p&gt;I added a column to our Users table called accepted_gdpr_eula_at that accepts Datetime, and ran the migration. Next, I created a new Controller in the Rails Application called GrprEulaController, and added an action called “accept_gdpr_eula!”. Then I added my route in the routes.rb file. (Bonus points for making this a proper RESTful action, when I refactor this I will do so then– the rest of our app is built in a similar way to this, so it is actually more consistent with everyone else’s work to name it this way. Don’t @ me.)&lt;/p&gt;

&lt;p&gt;The user clicks the “Accept” button, and the method in the controller updates the current_users gdpr_accepted_at column to Time.now, then redirects them to the home path.&lt;/p&gt;

&lt;p&gt;I also added some logic to the Popup Modal - if the current_users gdpr_accepted_at column is nil, show the modal. If it is not nil, don’t show the modal (Since logically it means they have already seen and accepted it.)&lt;/p&gt;

&lt;p&gt;We can now determine who has and has not accepted our new terms, and have restricted the ability of users who have not accepted the new terms from using our web application. Yes it could be argued that we could have built an entire EULA management system, but implementing it this way has solved the business goal in a reasonable amount of time. For what it’s worth, I wrote this on my lunchbreak because I thought it might be helpful to other developers currently working on the same issue, so don’t read too much into any of this or feel you need to break it apart. Have a great Memorial Day Weekend!&lt;/p&gt;
</description>
        <pubDate>Wed, 23 May 2018 12:50:28 -0400</pubDate>
        <link>http://localhost:4000/Adding-GDRP-EULA-To-A-Ruby-On-Rails-Application/</link>
        <guid isPermaLink="true">http://localhost:4000/Adding-GDRP-EULA-To-A-Ruby-On-Rails-Application/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Installing Drift into a Ruby on Rails or Jekyll Site</title>
        <description>&lt;p&gt;I frequently compare the profession of web development to that of being a carpenter. Much of our expertise relies in knowing the correct tool for any particular job, and knowing the layout of the problem and the tools available to us to solve the current problem.&lt;/p&gt;

&lt;p&gt;I mention this because I like using this personal website of mine to show off my work or the tools available to us. Far too frequently, a web developer will not have any samples of their work to show a prospective client, employer, etc. Would you hire a carpenter that couldn't show you anything they've built before, or if the table they showed you was kind of terrible looking? I think not. I enjoy knowing what the latest tools available to me are to help my site look and function better, and one of those tools is called Drift.&lt;/p&gt;

&lt;p&gt;I've seen Drift around for a while now and thought to myself, &quot;Could I install thing into my personal site that runs on the Jekyll framework? Could I easily add the Drift Conversational Marketing into a Ruby on Rails app? I wonder how long it would take me?&quot; I considered it a personal challenge to get it set up and deployed as quickly as possible. I started the clock and got to work onboarding through the free tier of their website.&lt;/p&gt;

&lt;p&gt;So, spoiler alert: It was super easy and I was done in less that 5 minutes. I went through their creation wizard (Select &quot;Javascript&quot; for Jekyll / Ruby on Rails), uploaded my avatar into the system, and had some javascript copied to my clipboard in a matter of minutes.&lt;/p&gt;

&lt;p&gt;In Jekyll, open up includes/head.html and paste the copied code into that partial. Save it. Commit it, push it, deploy it. For Rails, you'll want to open views/shared/header.html.erb and paste the js there.&lt;p&gt;

&lt;p&gt;It literally was one of the easiest things I've ever added to this site and now I have a super cool chat box on my personal website. You can see it in action on the bottom right corner of this page, the little red box. Head on over to Drift.com and check them out sometime.&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Nov 2017 12:20:28 -0500</pubDate>
        <link>http://localhost:4000/Installing-Drift-In-A-Ruby-On-Rails-or-Jekyll-Applicaiton/</link>
        <guid isPermaLink="true">http://localhost:4000/Installing-Drift-In-A-Ruby-On-Rails-or-Jekyll-Applicaiton/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Domains For Sale</title>
        <description>&lt;p&gt;This page is a landing page for my domain sales side business (I believe the kids these days call it a 'side hustle'? I digress.) The domains I own are DNS forwarded to this page where I have the below list of all domains currently owned by myself or someone I represent. I have over 10 years of experience in the business of buying and selling internet domains. Drop me a line if you have any questions about the business. On to the current products...&lt;/p&gt;

&lt;table class=&quot;table table-hover&quot;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;p&gt;Domain / URL&lt;/p&gt;&lt;/th&gt;
            &lt;th&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
            &lt;th&gt;&lt;p&gt;Buy Now&lt;/p&gt;&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;p&gt;BuyCurses.com&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;No description Available&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;location.href='mailto:hi@jessewaites.com';&quot;&gt;Make Offer&lt;/button&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;p&gt;whtmntn.com&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;Short abbreviation of White Mountain, perfect for a business located in the White Mountains area of New Hampshire.&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;location.href='mailto:hi@jessewaites.com';&quot;&gt;Make Offer&lt;/button&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;p&gt;whtmntns.com&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;Short abbreviation of White Mountains, perfect for a business located in the White Mountains area of New Hampshire.&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;location.href='mailto:hi@jessewaites.com';&quot;&gt;Make Offer&lt;/button&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;p&gt;BCKPCKR.com&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;Short abbreviation of Backpacker&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;location.href='mailto:hi@jessewaites.com';&quot;&gt;Make Offer&lt;/button&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;p&gt;BuyMyMCM.com&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;Buy My Man Crush Monday&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;location.href='mailto:hi@jessewaites.com';&quot;&gt;Make Offer&lt;/button&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;p&gt;BuyMyWCW.com&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;Buy My Woman Crush Wednesday&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;location.href='mailto:hi@jessewaites.com';&quot;&gt;Make Offer&lt;/button&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;p&gt;InvestingInCryptocoins.com&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;$$$$&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;location.href='mailto:hi@jessewaites.com';&quot;&gt;Make Offer&lt;/button&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Sun, 26 Nov 2017 12:20:28 -0500</pubDate>
        <link>http://localhost:4000/Premium-Domain-Names-For-Sale-2018/</link>
        <guid isPermaLink="true">http://localhost:4000/Premium-Domain-Names-For-Sale-2018/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Redirecting To An External Link In A React Application</title>
        <description>&lt;p&gt;Recently, I was working on a React Application and wondered how I could link to an external web page. I was learning the in's and out's of React Router and decided to figure it out. (If you haven't figured it out yet, that's the best way to learn: Have an idea and work on it until you implement it.)&lt;/p&gt;

&lt;p&gt;A React focused internet forum directed me to look at the the Redirect
function of the React Router, so I started there. I created my component, imported it into Index.js, but for the life of me I couldn't get it to work. The issue is that Redirect is for internal links only. Going from /Posts to /Users, for example. (It seems kind of obvious in retrospect.) I deleted the component and reverted the rest of my work and kept up the research.&lt;p&gt;

&lt;p&gt;The solution to this wasn't obvious so I thought to write this blog post and document this simple solution so that others can find it. Without further ado...

It turns out that what I wanted to do was use an inline component and window.location to force the browser to go to another page. I'll paste a gist below so you can see how I set my React Router up in Index.js. This definitely works with React Router 3 and 4. If this was useful to you, send me an email or follow me and let me know to keep it up.&lt;p&gt;

&lt;script src=&quot;https://gist.github.com/piratebroadcast/ff057097328b823251b3976117404934.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Oct 2017 12:20:28 -0400</pubDate>
        <link>http://localhost:4000/Redirecting-To-An-External-Link-In-A-React-Application/</link>
        <guid isPermaLink="true">http://localhost:4000/Redirecting-To-An-External-Link-In-A-React-Application/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Debug Your Rails Application With This One Weird Trick</title>
        <description>&lt;p&gt;Fate is a fickle mistress. Sometimes you find yourself working in a fresh Rails application, the entire architecture
of which fits inside of your mind. Other times, you find yourself working on a massive project with dozens of interconnecting pieces. I've found myself of the receiving end of the latter rather than the former more often not.
I would sometimes run into a problem where, I would try and save a new instance of an object through a form (called Thing.rb in this example) and the thing just wouldn't save, no matter what I tried. Logs weren't helpful, and Pry wouldn't help because I simply don't know what I don't know.&lt;/p&gt;

&lt;p&gt;I could try all kinds of incantations on it and shove the kitchen sink into the object (maybe a validation somewhere I don't know about?) but at the end of the day, you don't know what you don't know.&lt;/p&gt;

&lt;p&gt;Then one day I figured out this one weird trick...&lt;/p&gt;

&lt;p&gt;Drop a flash notice into the create action that tells me the errors on the object. Using this syntax, it even
comes out in human english so it's useful for your users as well. (Not just us developer types)&lt;/p&gt;

&lt;p&gt;Using this technique, I was able to see that the reason my object wasn't saving was that there was a validation being called on it on the model level, even though that association had long been removed. Who knows how long this had been broken in production?&lt;/p&gt;

&lt;p&gt;Try dropping the flash message line into your controllers sometime and see if you find it helpful for you as well.&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/piratebroadcast/fa56eb3fd9d576f0f1211b2098952b99.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 23 May 2017 12:20:28 -0400</pubDate>
        <link>http://localhost:4000/Debug-Your-Rails-Application-With-This-One-Weird-Trick/</link>
        <guid isPermaLink="true">http://localhost:4000/Debug-Your-Rails-Application-With-This-One-Weird-Trick/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Sending Responsive Emails In Ruby On Rails with Foundation For Emails</title>
        <description>&lt;p&gt;Recently, I was tasked with building a Report Card feature for our customers at work. After getting
more details about the intent of the feature, I decided that a slick looking responsive email would
best fill this need. I did a lot of research about the best tools for this and settled on using Foundation
For Emails, by the Zurb company. (For the layperson, a &quot;Responsive&quot; email is an email that &quot;morphs&quot; to fit the screen of whatever device it is currently being read on, so that means that it looks great on both an iPhone or an Android or a huge desktop monitor in a web browser.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://foundation.zurb.com/emails.html&quot;&gt;Here is the main Foundation For Emails website.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few of the reasons I chose Foundation For Emails is that...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://foundation.zurb.com/emails/email-templates.html&quot;&gt;They have some great prebuilt templates to choose from&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...So I could choose the one that closest met the needs of the Report Card. Second, they're almost the only game in town. There aren't a lot of other tools for this particular job. A key thing to know about is that responsive emails is a tricky process -- there are entire companies that build products around doing this, because each email client renders things differently, and GMail strips the style tags out of emails completely, so to find a single tool that deals with all of this for you is a great thing. So after looking at my options, Zurb it is. Onwards...&lt;/p&gt;

&lt;p&gt;In this feature, let's presume Users have_many ReportCards, and ReportCards belong_to Users.
I used the Whenever gem and the Schedule.rb file to automatically generate these User ReportCards via a rake task without any user intervention on the last day of the month, every single month.&lt;/p&gt;

&lt;p&gt;Now let's talk about the data in these Report Cards. The data in the actual thing I built was, frankly, very complicated, but for this example let's keep it nice and simple... Let's say a Report has 30 &quot;grades&quot;, for 30 days a month, each as the string datatype. Each day the user can receive an A, B, C, D, or F (Why is there no E grade? I just realized that. Super weird. Anyways...)&lt;/p&gt;

&lt;p&gt;Now that I understand the data structure, I generate a Mailer in the rails app from the Rails console:

&lt;pre&gt;$ rails g mailer CardMailer&lt;/pre&gt;

&lt;p&gt;And inside that mailer, I need to add the local variables that will render into the email itself:&lt;p&gt;

&lt;script src=&quot;https://gist.github.com/piratebroadcast/f2428257baaab951fc5aa10dce42ffc0.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Now on to the tricky part: When we ran the mailer generator command, it created a folder in our Views called &quot;Report Card Mailer&quot; - Inside of this, we need to create a file called &quot;report.html.erb&quot;. The file has to be named EXACTLY that for the mailer to find the right template... Our method is called def report(user), and it looks for the report.html.erb template based on that name. That took me forever to debug and figure out the first time through.&lt;/p&gt;

&lt;p&gt;Now that we have a place to put our responsive code, we need to grab it. Head over to the Foundation For Emails site and choose the template you want.&lt;/p&gt;

&lt;p&gt;Let's say this time we go with the &quot;basic&quot; template found here: https://litmus.com/checklist/emails/public/eb690d2&lt;/p&gt;


&lt;p&gt;Sign up and download the whole Foundation For Emails project file and open the folder in your editor. Now copy the Foundation CSS file completely and paste it into the CSS section of the Inliner found here:&lt;/p&gt;

&lt;p&gt;Inliner: http://foundation.zurb.com/emails/inliner-v2.html&lt;/p&gt;

&lt;p&gt;Next, open the HTML file for the Basic email and paste it into the HTML part. Make sure to uncheck the &quot;compress HTML&quot; option, then click the Inline! button. Copy that output and paste it directly into the report.html.erb file we created earlier in that mailer folder in the Views section.&lt;/p&gt;

&lt;p&gt;Note: This is a good time to install the letter_opener rubygem in the development section of your gemfile if you don't already have it.

Now, fire up your Rails console and enter the following:&lt;/p&gt;

&lt;pre&gt;$ ReportCardMailer.report(User.last).deliver&lt;/pre&gt;

&lt;p&gt;You should see a sweet looking email open up in your web browser thanks to letter_opener that looks identical to the one we selected from the template. You can also use the Google Chromes Device Emulator in the developer tools to emulate an iPhone device to see how it will look on a mobile. I took a screenshot of the screen at this point and dropped it into one of the devices at Mockuphone.com, so my boss was able to show stakeholders our progress and we could communicate visually with the rest of the team how the feature was coming along. Its also useful for making marketing materials for your new feature if need be.&lt;/p&gt;

&lt;p&gt;Mockuphone link: https://mockuphone.com/#ios&lt;/p&gt;

&lt;p&gt;Anyways, go through the email and edit it with whatever marketing text you need, and populate the variables we need with things like:
&quot;Your Grades:&quot;
&quot;Day One Grade:&quot; &quot;&amp;lt;%= day_1_grade %&amp;gt;&quot;
&quot;Day Two Grade:&quot; &quot;&amp;lt;%= day_2_grade %&amp;gt;&quot;
and so on...&lt;/p&gt;

&lt;p&gt;DO NOT add the rails tags before running it through the inliner, because the inliner itself doesn't understand rails tags and it will misinterpret them and break them. And make sure you stick to the template as closely as possible. The whole point of using it is that the people at Zurb have spend a LOT of time making sure this all works perfectly responsively, and it's a bad idea to go crazy, making fundamental changes to the template that might break that.&lt;/p&gt;

&lt;p&gt;NOTE: One of the most important &quot;Gotchas&quot; I learned from this process is how to fix broken email images. You see, when these emails would open for me locally, the image paths would be broken. This is because the email itself has no knowledge of the rails app and no idea about how image_tag paths work. We need to tell our email where our image assets are located on the internet through the action mailer's asset host config setting. The way to do this is to edit your application.rb file and add the following line:&lt;/p&gt;

&lt;pre&gt;config.action_mailer.asset_host = 'http://YourSiteUrl.com'&lt;/pre&gt;

&lt;p&gt;In development.rb, we need to override this to localhost:&lt;/p&gt;

&lt;pre&gt;config.action_mailer.asset_host = 'localhost:3000'&lt;/pre&gt;

&lt;p&gt;This took me a fair bit of time to debug and you get to know it for free. Lucky you. Now fire off another email in the console and your images, if you are using them, should now be working as intended.&lt;/p&gt;

&lt;p&gt;The very last implementation part of this is to send the report cards on a regular schedule. I did this by writing a simple rake take that found all users = Users.where(:send_report_cards =&amp;gt; &quot;true&quot;), then
looping through those users and firing off ReportCardMailer.report(user).deliver - This could also be made into a Sidekiq job.&lt;/p&gt;

&lt;p&gt;That presumes you made some sort of boolean setting on user to determine if a user gets the email or not but you get the idea there. Finally, I add a line to our schedule.rb file from that Whenever gem and run this rake task on the morning of the first of the month. Generate the Report Card at the end of the month, and send it on the 1st of the month. You see, report_card = user.report_cards.last on the 1st of the month will always be the correct report card, the most recent one, since there are created, chronologically, at the end of the previous month in a way in which we can anticipate. There may be a better way to do this but it fits our current need without overengineering a solution.&lt;/p&gt;

&lt;p&gt;To summarize, the process is: Download the Foundation For Emails project, Edit your template for the text you want, then copy the CSS and paste it into the Inliner, then paste the edited HTML, uncheck &quot;compress HTML option&quot;, paste the output into the mailer template, add your asset host settings, then add your rails tags and fire off a test in the console.&lt;/p&gt;

&lt;p&gt;So thats how I built the ReportCard feature, programmatically generated the Report Cards, and emailed them out at a regularly scheduled interval. If you have any questions, drop me a line on Twitter or via email and I'll do my best to give you a hand. Cheers.&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 May 2017 12:20:28 -0400</pubDate>
        <link>http://localhost:4000/Sending-Responsive-Emails-In-Ruby-On-Rails/</link>
        <guid isPermaLink="true">http://localhost:4000/Sending-Responsive-Emails-In-Ruby-On-Rails/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Demo: Drawing on the screen using HTML5 canvas</title>
        <description>&lt;p&gt;Hold and drag your mouse cursor or finger around. Enjoy the vibrant colors as you explore your inner artist, or something like that. Feel free to print the image after you draw it by simply pressing the Print button.&lt;/p&gt;

&lt;p&gt;&lt;button id=&quot;printVoucher&quot; class=&quot;btn btn-success&quot; onclick=&quot;printCanvas();&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt;  Print Image&lt;/button&gt;&lt;/p&gt;

&lt;p&gt;Draw below here.&lt;/p&gt;
&lt;hr /&gt;

&lt;canvas id=&quot;draw&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;
&lt;script&gt;
const canvas = document.querySelector('#draw');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
ctx.strokeStyle = '#b4251b';
ctx.lineJoin = 'round';
ctx.lineCap = 'round';
ctx.lineWidth = 100;


let isDrawing = false;
let lastX = 0;
let lastY = 0;
let hue = 0;
let direction = true;

function draw(e) {
  if (!isDrawing) return; // stop the fn from running when they are not moused down
  console.log(e);
  ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;
  ctx.beginPath();
  // start from
  ctx.moveTo(lastX, lastY);
  // go to
  ctx.lineTo(e.offsetX, e.offsetY);
  ctx.stroke();
  [lastX, lastY] = [e.offsetX, e.offsetY];

  hue++;
  if (hue &gt;= 360) {
    hue = 0;
  }
  if (ctx.lineWidth &gt;= 100 || ctx.lineWidth &lt;= 1) {
    direction = !direction;
  }

  if(direction) {
    ctx.lineWidth++;
  } else {
    ctx.lineWidth--;
  }

}

canvas.addEventListener('mousedown', (e) =&gt; {
  isDrawing = true;
  [lastX, lastY] = [e.offsetX, e.offsetY];
});


canvas.addEventListener('mousemove', draw);
canvas.addEventListener('mouseup', () =&gt; isDrawing = false);
canvas.addEventListener('mouseout', () =&gt; isDrawing = false);

// Set up touch events for mobile, etc
canvas.addEventListener(&quot;touchstart&quot;, function (e) {
        mousePos = getTouchPos(canvas, e);
  var touch = e.touches[0];
  var mouseEvent = new MouseEvent(&quot;mousedown&quot;, {
    clientX: touch.clientX,
    clientY: touch.clientY
  });
  canvas.dispatchEvent(mouseEvent);
}, false);
canvas.addEventListener(&quot;touchend&quot;, function (e) {
  var mouseEvent = new MouseEvent(&quot;mouseup&quot;, {});
  canvas.dispatchEvent(mouseEvent);
}, false);
canvas.addEventListener(&quot;touchmove&quot;, function (e) {
  var touch = e.touches[0];
  var mouseEvent = new MouseEvent(&quot;mousemove&quot;, {
    clientX: touch.clientX,
    clientY: touch.clientY
  });
  canvas.dispatchEvent(mouseEvent);
}, false);

// Get the position of a touch relative to the canvas
function getTouchPos(canvasDom, touchEvent) {
  var rect = canvasDom.getBoundingClientRect();
  return {
    x: touchEvent.touches[0].clientX - rect.left,
    y: touchEvent.touches[0].clientY - rect.top
  };
}

// Prevent scrolling when touching the canvas
document.body.addEventListener(&quot;touchstart&quot;, function (e) {
  if (e.target == canvas) {
    e.preventDefault();
  }
}, false);
document.body.addEventListener(&quot;touchend&quot;, function (e) {
  if (e.target == canvas) {
    e.preventDefault();
  }
}, false);
document.body.addEventListener(&quot;touchmove&quot;, function (e) {
  if (e.target == canvas) {
    e.preventDefault();
  }
}, false);

function printCanvas(el) {  
    var dataUrl = canvas.toDataURL();
    var windowContent = '&lt;!DOCTYPE html&gt;';
    windowContent += '&lt;html&gt;'
    windowContent += '&lt;head&gt;&lt;title&gt;Your image from JesseWaites.com&lt;/title&gt;&lt;/head&gt;';
    windowContent += '&lt;body&gt;'
    windowContent += '&lt;img src=&quot;' + dataUrl + '&quot;&gt;';
    windowContent += '&lt;/body&gt;';
    windowContent += '&lt;/html&gt;';
    var printWin = window.open('','','width=340,height=260');
    printWin.document.open();
    printWin.document.write(windowContent);
    printWin.document.close();
    printWin.focus();
    printWin.print();
    printWin.close();
}


&lt;/script&gt;

</description>
        <pubDate>Tue, 20 Dec 2016 12:20:28 -0500</pubDate>
        <link>http://localhost:4000/drawing-on-the-screen-with-html5-canvas/</link>
        <guid isPermaLink="true">http://localhost:4000/drawing-on-the-screen-with-html5-canvas/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Text To Speech Demonstration using Javascript</title>
        <description>&lt;p&gt;Here's a demo of the experimental &quot;Speech Synthesis&quot; interface of the Web Speech API.
It should be noted that this does not currently work on mobile devices.&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;rate&quot;&gt;Select a Voice:&lt;/label&gt;
  &lt;select name=&quot;voice&quot; id=&quot;voices&quot; class=&quot;form-control&quot; autofocus=&quot;&quot;&gt;
    &lt;option value=&quot;&quot;&gt;Select A Voice&lt;/option&gt;
  &lt;/select&gt;&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;rate&quot;&gt;Speech Speed Rate:&lt;/label&gt;
  &lt;input name=&quot;rate&quot; type=&quot;range&quot; min=&quot;0&quot; max=&quot;3&quot; value=&quot;1&quot; step=&quot;0.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;label for=&quot;pitch&quot;&gt;Voice Pitch:&lt;/label&gt;&lt;/p&gt;

&lt;p&gt;&lt;input name=&quot;pitch&quot; type=&quot;range&quot; min=&quot;0&quot; max=&quot;2&quot; step=&quot;0.1&quot; /&gt;
  &lt;br /&gt;
  &lt;label for=&quot;rate&quot;&gt;Enter the text you would like spoken here:&lt;/label&gt;&lt;/p&gt;
&lt;textarea class=&quot;form-control&quot; rows=&quot;5&quot; name=&quot;text&quot;&gt;Press Speak now, or change this text first, then press the green button. The text in this box is editable. 👍&lt;/textarea&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;button id=&quot;speak&quot; class=&quot;btn btn-success&quot;&gt;Speak&lt;/button&gt;
  &lt;button id=&quot;stop&quot; class=&quot;btn btn-danger&quot;&gt;Stop!&lt;/button&gt;&lt;/p&gt;

&lt;script&gt;
const msg = new SpeechSynthesisUtterance();
let voices = [];
const voicesDropdown = document.querySelector('[name=&quot;voice&quot;]');
const options = document.querySelectorAll('[type=&quot;range&quot;], [name=&quot;text&quot;]');
const speakButton = document.querySelector('#speak');
const stopButton = document.querySelector('#stop');
msg.text = document.querySelector('[name=&quot;text&quot;]').value;

function populateVoices() {
voices = this.getVoices();
voicesDropdown.innerHTML = voices
  .filter(voice =&gt; voice.lang.includes('en'))
  .map(voice =&gt; `&lt;option value=&quot;${voice.name}&quot;&gt;${voice.name} (${voice.lang})&lt;/option&gt;`)
  .join('');
}

function setVoice() {
msg.voice = voices.find(voice =&gt; voice.name === this.value);
toggle();
}

function toggle(startOver = true) {
speechSynthesis.cancel();
if (startOver) {
  speechSynthesis.speak(msg);
}
}

function setOption() {
console.log(this.name, this.value);
msg[this.name] = this.value;
toggle();
}

speechSynthesis.addEventListener('voiceschanged', populateVoices);
voicesDropdown.addEventListener('change', setVoice);
options.forEach(option =&gt; option.addEventListener('change', setOption));
speakButton.addEventListener('click', toggle);
stopButton.addEventListener('click', () =&gt; toggle(false));

&lt;/script&gt;

</description>
        <pubDate>Tue, 20 Dec 2016 12:20:28 -0500</pubDate>
        <link>http://localhost:4000/text-to-speech-demo-in-javascript/</link>
        <guid isPermaLink="true">http://localhost:4000/text-to-speech-demo-in-javascript/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Form Typeahead using the new Fetch API</title>
        <description>&lt;style&gt;
button, input, optgroup, select, textarea {
    margin: 0;
    font: inherit;
    color: inherit;
    width: 500px;
    height: 60px;
}
&lt;/style&gt;

&lt;p&gt;Pretty simple demo: Start typing into the form box. Try “Boston” or “Massachusetts” - This was built using the new HTML Fetch API. It’s really cool to be able to do this all client side with no need for anything else. &lt;a href=&quot;https://davidwalsh.name/fetch&quot; title=&quot;Fetch&quot;&gt;You can learn more about Fetch over on David Walsh’s blog.&lt;/a&gt;&lt;/p&gt;

&lt;body&gt;

  &lt;form class=&quot;search-form&quot;&gt;
    &lt;input type=&quot;text&quot; class=&quot;search&quot; placeholder=&quot;Start typing City or State name here&quot; autofocus=&quot;&quot; /&gt;
    &lt;ul class=&quot;suggestions&quot;&gt;
      &lt;li&gt;Filter for a city&lt;/li&gt;
      &lt;li&gt;or a state&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/form&gt;
&lt;script&gt;
const endpoint = 'https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json';

const cities = [];
fetch(endpoint)
  .then(blob =&gt; blob.json())
  .then(data =&gt; cities.push(...data));

function findMatches(wordToMatch, cities) {
  return cities.filter(place =&gt; {
    const regex = new RegExp(wordToMatch, 'gi');
    return place.city.match(regex) || place.state.match(regex)
  });
}

function numberWithCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}

function displayMatches() {
  const matchArray = findMatches(this.value, cities);
  const html = matchArray.map(place =&gt; {
    const regex = new RegExp(this.value, 'gi');
    const cityName = place.city.replace(regex, `&lt;span class=&quot;hl&quot;&gt;${this.value}&lt;/span&gt;`);
    const stateName = place.state.replace(regex, `&lt;span class=&quot;hl&quot;&gt;${this.value}&lt;/span&gt;`);
    return `
      &lt;li&gt;
        &lt;span class=&quot;name&quot;&gt;${cityName}, ${stateName}&lt;/span&gt;
        &lt;span class=&quot;population&quot;&gt;Population: ${numberWithCommas(place.population)}&lt;/span&gt;
      &lt;/li&gt;
    `;
  }).join('');
  suggestions.innerHTML = html;
}

const searchInput = document.querySelector('.search');
const suggestions = document.querySelector('.suggestions');

searchInput.addEventListener('change', displayMatches);
searchInput.addEventListener('keyup', displayMatches);

&lt;/script&gt;
&lt;/body&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 12:20:28 -0500</pubDate>
        <link>http://localhost:4000/ajax-typeahead-stunts/</link>
        <guid isPermaLink="true">http://localhost:4000/ajax-typeahead-stunts/</guid>
        
        
        <category>coding</category>
        
      </item>
    
  </channel>
</rss>
