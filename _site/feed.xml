<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jesse Waites</title>
    <description>Jesse Waites - Boston, MA based Ruby on Rails Developer.</description>
    <link>http://JesseWaites.com/</link>
    <atom:link href="http://JesseWaites.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 20 Dec 2016 14:08:30 -0500</pubDate>
    <lastBuildDate>Tue, 20 Dec 2016 14:08:30 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Updating CSS variables with Javascript in the Swiss Alps</title>
        <description>&lt;body&gt;
  &lt;p&gt;Move the range sliders around to update our CSS variables with &lt;span class=&quot;hl&quot;&gt;Javascript&lt;/span&gt;
  and reveal my hiking picture taken in the Swiss Alps, in Gimmelwald, Switzerland.&lt;/p&gt;

  &lt;div class=&quot;controls&quot;&gt;
    &lt;label for=&quot;spacing&quot;&gt;Frame Size:&lt;/label&gt;
    &lt;input type=&quot;range&quot; name=&quot;spacing&quot; min=&quot;10&quot; max=&quot;200&quot; value=&quot;10&quot; data-sizing=&quot;px&quot; /&gt;

    &lt;label for=&quot;blur&quot;&gt;Blur:&lt;/label&gt;
    &lt;input type=&quot;range&quot; name=&quot;blur&quot; min=&quot;0&quot; max=&quot;25&quot; value=&quot;5&quot; data-sizing=&quot;px&quot; /&gt;

    &lt;label for=&quot;base&quot;&gt;Frame Color&lt;/label&gt;
    &lt;input type=&quot;color&quot; name=&quot;base&quot; value=&quot;#b4251b&quot; /&gt;
  &lt;/div&gt;

  &lt;img src=&quot;http://i.imgur.com/zSUPCqp.png&quot; /&gt;
  &lt;p&gt;This is a photo of me on a recent hiking trip to the Swiss Alps, in Gimmelwald, Switzerland.
  It&#39;s an amazing place-- You should go if you ever have the chance!&lt;/p&gt;

  &lt;style&gt;
  input[type=range]{
  -webkit-appearance: none;
}

input[type=range]::-webkit-slider-runnable-track {
  width: 300px;
  height: 5px;
  background: #ddd;
  border: none;
  border-radius: 3px;
}

input[type=range]::-webkit-slider-thumb {
  -webkit-appearance: none;
  border: none;
  height: 16px;
  width: 16px;
  border-radius: 50%;
  background: #b4251b;
  margin-top: 0px;
}

input[type=range]:focus {
  outline: none;
}

input[type=range]:focus::-webkit-slider-runnable-track {
  background: #ccc;
}

    :root {
      --base: #b4251b;
      --spacing: 10px;
      --blur: 5px;
    }

    img {
      padding: var(--spacing);
      background: var(--base);
      filter: blur(var(--blur));
    }

    .hl {
      color: var(--base);
    }

    body {
      text-align: center;
    }

    body {
      color: black;
      font-family: &#39;helvetica neue&#39;, sans-serif;
      font-weight: 100;
      font-size: 50px;
    }

    .controls {
      margin-bottom: 50px;
    }

    input {
      width:100px;
    }
  &lt;/style&gt;

  &lt;script&gt;
    const inputs = document.querySelectorAll(&#39;.controls input&#39;);

    function handleUpdate() {
      const suffix = this.dataset.sizing || &#39;&#39;;
      document.documentElement.style.setProperty(`--${this.name}`, this.value + suffix);
    }

    inputs.forEach(input =&gt; input.addEventListener(&#39;change&#39;, handleUpdate));
    inputs.forEach(input =&gt; input.addEventListener(&#39;mousemove&#39;, handleUpdate));
  &lt;/script&gt;


&lt;/body&gt;
</description>
        <pubDate>Mon, 12 Dec 2016 12:20:28 -0500</pubDate>
        <link>http://JesseWaites.com/image-blur-with-javascipt/</link>
        <guid isPermaLink="true">http://JesseWaites.com/image-blur-with-javascipt/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Tick Tock: Javascript / CSS Analog Clock Demo</title>
        <description>&lt;body&gt;

    &lt;p&gt;The current time is:&lt;/p&gt;


    &lt;div class=&quot;clock&quot;&gt;
      &lt;div class=&quot;clock-face&quot;&gt;
        &lt;div class=&quot;hand hour-hand&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;hand min-hand&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;hand second-hand&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;p id=&quot;time&quot;&gt;&lt;/p&gt;

  &lt;style&gt;


    .clock {
      width: 30rem;
      height: 30rem;
      border:20px solid #b4251b;
      border-radius:50%;
      margin:50px auto;
      position: relative;
      padding:2rem;
      box-shadow:
        0 0 0 4px rgba(0,0,0,0.1),
        inset 0 0 0 3px #EFEFEF,
        inset 0 0 10px black,
        0 0 10px rgba(0,0,0,0.2);
    }

    .clock-face {
      position: relative;
      width: 100%;
      height: 100%;
      transform: translateY(-3px);
    }

    .hand {
      width:50%;
      height:6px;
      background:black;
      position: absolute;
      top:50%;
      transform-origin: 100%;
      transform: rotate(90deg);
      transition: all 0.05s;
      transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);
    }
&lt;/style&gt;

&lt;script&gt;
  const secondHand = document.querySelector(&#39;.second-hand&#39;);
  const minsHand = document.querySelector(&#39;.min-hand&#39;);
  const hourHand = document.querySelector(&#39;.hour-hand&#39;);

  function setDate() {
    const now = new Date();

    const seconds = now.getSeconds();
    const secondsDegrees = ((seconds / 60) * 360) + 90;
    secondHand.style.transform = `rotate(${secondsDegrees}deg)`;

    const mins = now.getMinutes();
    const minsDegrees = ((mins / 60) * 360) + 90;
    minsHand.style.transform = `rotate(${minsDegrees}deg)`;

    const hour = now.getHours();
    const hourDegrees = ((hour / 12) * 360) + 90;
    hourHand.style.transform = `rotate(${hourDegrees}deg)`;
  }

  setInterval(setDate, 1000);

  setDate();

  (function () {
    function checkTime(i) {
        return (i &lt; 10) ? &quot;0&quot; + i : i;
    }

    function startTime() {
        var today = new Date(),
            h = checkTime(today.getHours()),
            m = checkTime(today.getMinutes()),
            s = checkTime(today.getSeconds());
            ampm = (h &gt;= 12) ? &quot;PM&quot; : &quot;AM&quot;;
        document.getElementById(&#39;time&#39;).innerHTML = h + &quot;:&quot; + m + &quot;:&quot; + s + ampm;
        t = setTimeout(function () {
            startTime()
        }, 500);
    }
    startTime();
})();

&lt;/script&gt;
&lt;/body&gt;
</description>
        <pubDate>Mon, 12 Dec 2016 12:20:28 -0500</pubDate>
        <link>http://JesseWaites.com/css-javascript-analog-clock/</link>
        <guid isPermaLink="true">http://JesseWaites.com/css-javascript-analog-clock/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Speech to Text Translation Demo with Javascript</title>
        <description>&lt;p&gt;Check this out ‚Äì See that thing in the upper left corner of the browser? Click ‚ÄúAllow‚Äù
to allow my website to briefly access your microphone, then start talking to your computer.
This works on non-mobile devices only, and best in Chrome. I built this with the HTML5 Speech Recognition API, which allows JavaScript to have access to a browser‚Äôs audio stream and convert it to text.&lt;/p&gt;

&lt;p&gt;When you‚Äôre testing it, say the words ‚ÄúPizza‚Äù, ‚ÄúIce Cream‚Äù, or ‚ÄúCheeseburger‚Äù for a nice surprise.&lt;/p&gt;

&lt;pre&gt;&lt;div class=&quot;words&quot; contenteditable=&quot;&quot;&gt;
&lt;/div&gt;&lt;/pre&gt;

&lt;script&gt;
  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

  const recognition = new SpeechRecognition();
  recognition.interimResults = true;

  let p = document.createElement(&#39;p&#39;);
  const words = document.querySelector(&#39;.words&#39;);
  words.appendChild(p);

  recognition.addEventListener(&#39;result&#39;, e =&gt; {
    const transcript = Array.from(e.results)
      .map(result =&gt; result[0])
      .map(result =&gt; result.transcript)
      .join(&#39;&#39;);

      const poopScript = transcript.replace(/poop|poo|shit|dump/gi, &#39;üí©&#39;);
      p.textContent = poopScript;

      if (e.results[0].isFinal) {
        p = document.createElement(&#39;p&#39;);
        words.appendChild(p);
      }
      if(transcript.includes(&#39;pizza&#39;)) {
        alert(&quot;Your üçï is on the way!&quot;);
      }
      if(transcript.includes(&#39;Pizza&#39;)) {
        alert(&quot;Your üçï is on the way!&quot;);
      }
      if(transcript.includes(&#39;cheeseburger&#39;)) {
        alert(&quot;üçî Protip: 5 Guys has the best burger in town.&quot;);
      }
      if(transcript.includes(&#39;ice cream&#39;)) {
        alert(&quot;üòï Isn&#39;t it a little cold for Ice cream? Anyway, your wish is my command: üç¶&quot;);
      }
      if(transcript.includes(&#39;shit&#39;)) {
        alert(&quot;üí© üí© üí© üí© üí©&quot;);
      }
  });

  recognition.addEventListener(&#39;end&#39;, recognition.start);

  recognition.start();

&lt;/script&gt;

</description>
        <pubDate>Mon, 17 Oct 2016 12:20:28 -0400</pubDate>
        <link>http://JesseWaites.com/speech-to-text-translation-in-javascript-demo/</link>
        <guid isPermaLink="true">http://JesseWaites.com/speech-to-text-translation-in-javascript-demo/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Javascript Drum Machine Demo</title>
        <description>&lt;style&gt;
.keys {
  display:flex;
  flex:1;
  min-height:20vh;
  align-items: center;
  justify-content: center;
}

.key {
  border:4px solid black;
  border-radius:5px;
  margin:1rem;
  font-size: 1.5rem;
  padding:1rem .5rem;
  transition:all .07s;
  width:100px;
  text-align: center;
  color:white;
  background:rgba(0,0,0,0.4);
  text-shadow:0 0 5px black;
}

.playing {
  transform:scale(1.1);
  border-color:#ffc600;
  box-shadow: 0 0 50px #ffc600;
}

kbd {
  display: block;
  font-size: 40px;
}

.sound {
  font-size: 5.2rem;
  text-transform: uppercase;
  letter-spacing: 1px;
  color:#ffc600;
}
&lt;/style&gt;

&lt;div class=&quot;keys&quot;&gt;
    &lt;div data-key=&quot;65&quot; class=&quot;key&quot;&gt;
      &lt;kbd&gt;A&lt;/kbd&gt;
      &lt;span class=&quot;sound&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-key=&quot;83&quot; class=&quot;key&quot;&gt;
      &lt;kbd&gt;S&lt;/kbd&gt;
      &lt;span class=&quot;sound&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-key=&quot;68&quot; class=&quot;key&quot;&gt;
      &lt;kbd&gt;D&lt;/kbd&gt;
      &lt;span class=&quot;sound&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-key=&quot;70&quot; class=&quot;key&quot;&gt;
      &lt;kbd&gt;F&lt;/kbd&gt;
      &lt;span class=&quot;sound&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-key=&quot;71&quot; class=&quot;key&quot;&gt;
      &lt;kbd&gt;G&lt;/kbd&gt;
      &lt;span class=&quot;sound&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-key=&quot;72&quot; class=&quot;key&quot;&gt;
      &lt;kbd&gt;H&lt;/kbd&gt;
      &lt;span class=&quot;sound&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-key=&quot;74&quot; class=&quot;key&quot;&gt;
      &lt;kbd&gt;J&lt;/kbd&gt;
      &lt;span class=&quot;sound&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-key=&quot;75&quot; class=&quot;key&quot;&gt;
      &lt;kbd&gt;K&lt;/kbd&gt;
      &lt;span class=&quot;sound&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-key=&quot;76&quot; class=&quot;key&quot;&gt;
      &lt;kbd&gt;L&lt;/kbd&gt;
      &lt;span class=&quot;sound&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;audio data-key=&quot;65&quot; src=&quot;/sounds/clap.wav&quot;&gt;&lt;/audio&gt;
&lt;audio data-key=&quot;83&quot; src=&quot;/sounds/hihat.wav&quot;&gt;&lt;/audio&gt;
&lt;audio data-key=&quot;68&quot; src=&quot;/sounds/kick.wav&quot;&gt;&lt;/audio&gt;
&lt;audio data-key=&quot;70&quot; src=&quot;/sounds/openhat.wav&quot;&gt;&lt;/audio&gt;
&lt;audio data-key=&quot;71&quot; src=&quot;/sounds/boom.wav&quot;&gt;&lt;/audio&gt;
&lt;audio data-key=&quot;72&quot; src=&quot;/sounds/ride.wav&quot;&gt;&lt;/audio&gt;
&lt;audio data-key=&quot;74&quot; src=&quot;/sounds/snare.wav&quot;&gt;&lt;/audio&gt;
&lt;audio data-key=&quot;75&quot; src=&quot;/sounds/tom.wav&quot;&gt;&lt;/audio&gt;
&lt;audio data-key=&quot;76&quot; src=&quot;/sounds/tink.wav&quot;&gt;&lt;/audio&gt;

&lt;p&gt;If you‚Äôre on a laptop, press the letter ‚ÄúA‚Äù , then ‚ÄúF‚Äù - Cool, right? (This demo works on non-mobile devices only. Sorry, iPhone and Android users.)&lt;/p&gt;

&lt;p&gt;Recently, my friend Ben shared a link to Web Bos‚Äô free new Javascript course, Javascript30. I‚Äôve known Wes‚Äô name around for quite a while being that he has
  created what is known as the de facto ReactJs course, so I was curious to what his free course would offer. I‚Äôve recently decided to give it a spin and was happy to see that the first course is building a javascript drum machine. I‚Äôve always wanted to build one of these.&lt;/p&gt;

&lt;p&gt;Long story short, you create a directory in your project full of .wav sound files. In your HTML, you have various audio tags - each one has a custom data-key attribute assigned to a different keyboard letter. In your javascript, you have a window listener waiting and watching for keyboard presses. When a key on the keyboard is pushed that corresponds to an audio file, that file is played via the audio HTML API. Otherwise, if a key is pressed that is NOT associated with an audio file, the function is exited and begins again, waiting and listening for the next keypress. I‚Äôm happy with Wes‚Äô course so far and am looking forward to the rest of it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://javascript30.com/&quot;&gt;Click here to see Wes‚Äô Javascript30 course.&lt;/a&gt;&lt;/p&gt;

&lt;script&gt;
    function removeTransition(e) {
      if (e.propertyName !== &#39;transform&#39;) return;
      e.target.classList.remove(&#39;playing&#39;);
    }

    function playSound(e) {
      const audio = document.querySelector(`audio[data-key=&quot;${e.keyCode}&quot;]`);
      const key = document.querySelector(`div[data-key=&quot;${e.keyCode}&quot;]`);
      if (!audio) return;

      key.classList.add(&#39;playing&#39;);
      audio.currentTime = 0;
      audio.play();
    }

    const keys = Array.from(document.querySelectorAll(&#39;.key&#39;));
    keys.forEach(key =&gt; key.addEventListener(&#39;transitionend&#39;, removeTransition));
    window.addEventListener(&#39;keydown&#39;, playSound);
  &lt;/script&gt;

</description>
        <pubDate>Mon, 17 Oct 2016 12:20:28 -0400</pubDate>
        <link>http://JesseWaites.com/Javascript-Drum-Machine-Demo/</link>
        <guid isPermaLink="true">http://JesseWaites.com/Javascript-Drum-Machine-Demo/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Working with React</title>
        <description>&lt;p&gt;React, the javascript library invented by Facebook, is a very hot technology right now, and rightly so. With such a small surface area of API calls to learn and implement, it seems to do a small number of things just right, without over extending itself into other sections of web application development where it might not be completely needed. I‚Äôve decided to jot down some ideas and concepts I‚Äôve learned / am learning in the hopes of both teaching others and reinforcing for myself the things I pick up as I go. They say the best way to remember something is to write it down, after all. I‚Äôve been building a Youtube clone with React and Redux using the Youtube API for fun and have been learning quite a bit about it lately. Here‚Äôs a screenshot of my progress on that so far‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/CdY8xjj.png&quot; alt=&quot;React App from Jesse Waites&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This article will be updated with new information as I build and continue to learn more.&lt;/p&gt;

&lt;p&gt;From Wikipedia, ‚ÄúReact (sometimes styled React.js or ReactJS) is an open-source JavaScript library providing a view for data rendered as HTML. React views are typically rendered using components that contain additional components specified as custom HTML tags. React promises programmers a model in which subcomponents cannot directly affect enclosing components (‚Äúdata flows down‚Äù); efficient updating of the HTML document when data changes; and a clean separation between components on a modern single-page application.&lt;/p&gt;

&lt;p&gt;React is maintained by Facebook, Instagram and a community of individual developers and corporations. React is currently being used on the websites of Facebook, Instagram, Netflix, Imgur, Bleacher Report, Feedly, Airbnb, SeatGeek, HelloSign, and others.‚Äù&lt;/p&gt;

&lt;p&gt;Some of the ideas and concepts I‚Äôve learned since working with React are:&lt;/p&gt;

&lt;h3 id=&quot;state&quot;&gt;State&lt;/h3&gt;

&lt;p&gt;Probably the most important concept in React is the concept of ‚ÄúState‚Äù. State is described as how a React component‚Äôs data looks at any moment in time. This concept is better explained elsewhere by people far better at this that I so I will leave it to you to find resources about this. I may come back to this at a later moment and flesh this section out.&lt;/p&gt;

&lt;h3 id=&quot;one-way-data-flow&quot;&gt;One-way data flow&lt;/h3&gt;

&lt;p&gt;Properties, a set of immutable object values, are passed to a component‚Äôs renderer as properties in its HTML tag. A component cannot directly modify any properties passed to it, but can be passed callback functions that do modify values. This mechanism is expressed as ‚Äúproperties flow down; actions flow up‚Äù. As an example of this, in my app, I have a concept called ‚Äúselected video‚Äù that flows down all the way from the ‚ÄúApp‚Äù concept to ‚ÄúVideo List‚Äù, to ‚ÄúVideo List Item‚Äù.&lt;/p&gt;

&lt;h3 id=&quot;virtual-dom&quot;&gt;Virtual DOM&lt;/h3&gt;

&lt;p&gt;Another notable feature is the use of a ‚Äúvirtual DOM.‚Äù React creates an in-memory data structure cache, computes the resulting differences, and then updates the browser‚Äôs displayed DOM efficiently. This allows the programmer to write code as if the entire page is rendered on each change while the React libraries only render subcomponents that actually change. Basically, this ‚Äúvirtual‚Äù or ‚Äúshadow‚Äù DOM pushes only the needed page changes to the ‚Äúreal‚Äù DOM.&lt;/p&gt;

&lt;h3 id=&quot;jsx&quot;&gt;JSX&lt;/h3&gt;

&lt;p&gt;React components are typically written in JSX, a JavaScript extension syntax allowing quoting of HTML and using HTML tag syntax to render subcomponents. HTML syntax is processed into JavaScript calls of the React library. Developers may also write in pure JavaScript. Interesting, I‚Äôve found that some HTML is not supported in JSX, specifically ‚Äúbreak‚Äù tags and horizontal rule tags.&lt;/p&gt;

&lt;h3 id=&quot;npm-server-error-reporting&quot;&gt;NPM Server Error Reporting&lt;/h3&gt;

&lt;p&gt;Errors such as syntax errors and whatnot are pretty easily found in the NPM server log, which is pretty amazing. I always know exactly where to look to begin debugging the issue. I am definitely a fan of that.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Oct 2016 12:20:28 -0400</pubDate>
        <link>http://JesseWaites.com/working-with-react/</link>
        <guid isPermaLink="true">http://JesseWaites.com/working-with-react/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>TheatreJS Demo</title>
        <description>&lt;p&gt;Recently, I discovered a cool little library called TheatreJS, created by Gabin Aureche. This library adds an animated effect mimicking human typing behavior in real time. I love libraries like this because it is a really creative way to display otherwise boring static text. It is great to be reminded that us web developers can do very, very creative things online to get our users&#39; attention. I&#39;d love to made a demo of a rap or rock song duet if I ever have the time! I added a demo below that I lifted from Gabin&#39;s Codepen demo with his permission.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Zhouzi/TheaterJS&quot;&gt;Here is the project on Github&lt;/a&gt;, and you can follow Gabin &lt;a href=&quot;https://twitter.com/Zh0uzi/&quot;&gt;here on Twitter.&lt;/a&gt;&lt;/p&gt;

&lt;style&gt;
.actor {
  font-size: 2.8rem;
  display: flex;
  margin-bottom: $spacing;

  &amp;:last-of-type {
    margin-bottom: $spacing-large;
  }
}

.actor__content {
  flex-grow: 1;
}

@keyframes blink {
  from { opacity: 0; }
  to { opacity: 1; }
}

.actor__content--typing::after {
  content: &#39;|&#39;;
  animation: blink 500ms infinite;
}
&lt;/style&gt;

&lt;p&gt;Without further ado, the demo:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;main class=&quot;scene&quot;&gt;
  &lt;div class=&quot;actor&quot;&gt;
    &lt;div class=&quot;actor__prefix&quot;&gt;-&lt;/div&gt;
    &lt;div id=&quot;vader&quot; class=&quot;actor__content&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;actor&quot;&gt;
    &lt;div class=&quot;actor__prefix&quot;&gt;-&lt;/div&gt;
    &lt;div id=&quot;luke&quot; class=&quot;actor__content&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/main&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;iframe height=&quot;319&quot; scrolling=&quot;no&quot; src=&quot;//codepen.io/Zhouzi/embed/JoRazP/?height=319&amp;amp;theme-id=0&amp;amp;default-tab=html&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/Zhouzi/pen/JoRazP/&quot;&gt;TheaterJS&lt;/a&gt; by Gabin Aureche (&lt;a href=&quot;http://codepen.io/Zhouzi&quot;&gt;@Zhouzi&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;

&lt;script src=&quot;//cdn.jsdelivr.net/theaterjs/latest/theater.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
var theater = theaterJS()

theater
.on(&#39;type:start, erase:start&#39;, function () {
  theater.getCurrentActor().$element.classList.add(&#39;actor__content--typing&#39;)
})
.on(&#39;type:end, erase:end&#39;, function () {
  theater.getCurrentActor().$element.classList.remove(&#39;actor__content--typing&#39;)
})
.on(&#39;type:start, erase:start&#39;, function () {
  if (theater.getCurrentActor().name === &#39;vader&#39;) {
    document.body.classList.add(&#39;dark&#39;)
  } else {
    document.body.classList.remove(&#39;dark&#39;)
  }
})

theater
.addActor(&#39;vader&#39;, { speed: 0.8, accuracy: 0.6 })
.addActor(&#39;luke&#39;)
.addScene(&#39;vader:Luke.&#39;, 600)
.addScene(&#39;luke:What?&#39;, 400)
.addScene(&#39;vader:I am your father.&#39;, 400)
.addScene(&#39;luke:Nooo...&#39;, -3, &#39;!!! &#39;, 600, &#39;No! &#39;, 600)
.addScene(&#39;luke:That\&#39;s not true!&#39;, 600)
.addScene(&#39;luke:That\&#39;s impossible!&#39;, 400)
.addScene(&#39;vader:Search your feelings.&#39;, 1600)
.addScene(&#39;vader:You know it to be true.&#39;, 1000)
.addScene(&#39;luke:Noooooooo! &#39;, 600, &#39;No!&#39;, 400)
.addScene(&#39;vader:Luke.&#39;, 600)
.addScene(&#39;vader:You can destroy the Emperor.&#39;, 1600)
.addScene(&#39;vader:He has foreseen this. &#39;, 800)
.addScene(&#39;vader:It is your destiny.&#39;, 1600)
.addScene(&#39;vader:Join me.&#39;, 800)
.addScene(&#39;vader:Together we can rule the galaxy.&#39;, 800)
.addScene(&#39;vader:As father and son.&#39;, 1600)
.addScene(&#39;vader:Come with me. &#39;, 800)
.addScene(&#39;vader:It is the only way.&#39;, 2000)
.addScene(theater.replay.bind(theater))
&lt;/script&gt;

</description>
        <pubDate>Thu, 21 Jul 2016 05:50:28 -0400</pubDate>
        <link>http://JesseWaites.com/theatre-js-demo/</link>
        <guid isPermaLink="true">http://JesseWaites.com/theatre-js-demo/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Embedding Interactive Ruby Snippets Into Web Pages</title>
        <description>&lt;p&gt;Let&#39;s say you&#39;re a web developer and occasionally need to blog about code.
You want to show off how to do this or that. Conventionally, there is no way
to do this because browsers only understand HTML, CSS, and Javascript.&lt;/p&gt;

&lt;p&gt;With this new javascript plugin called &lt;strong&gt;klipsify&lt;/strong&gt;, I can now
run interactive Ruby snippets in the browser. Let&#39;s take a tour... (*Note: As of now
this only works on non-mobile devices.*)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-ruby&quot;&gt;[9,8] * 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the section above, change the ‚Äú2‚Äù to a ‚Äú20‚Äù, so that it says ‚Äú[9,8] * 20‚Äù
Did you see the output change? Cool, right?&lt;/p&gt;

&lt;p&gt;Let‚Äôs show off something more complicated. Let‚Äôs write a custom Ruby method
called ‚Äútrumpify‚Äù.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-ruby&quot;&gt;def trumpify(text)
&quot;Wow! #{text} Sad!!&quot;
end
trumpify(&quot;My campaign is a garbage fire!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change &quot;My campaign is a garbage fire&quot; to anything else and the custom ruby
method will trumpify it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In this next example, let‚Äôs explore Ruby‚Äôs Upcase method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-ruby&quot;&gt;&quot;Ban Assault Rifles&quot;.upcase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here, we explore the Swapcase method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-ruby&quot;&gt;&quot;Trump Is A Con Artist.&quot;.swapcase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, where words were capitalized, they are now lowercase, and vice versa.&lt;/p&gt;

&lt;p&gt;You can check out Klipse here: https://github.com/viebel/klipse&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ok. Thanks for reading.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://2.bp.blogspot.com/-d94FNkb_Zxc/Tij3o8NE77I/AAAAAAAAAdw/DeZlPhbh2uM/s1600/fin.png&quot; alt=&quot;Fin&quot; /&gt;&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://app.klipse.tech/css/codemirror.css&quot; /&gt;

&lt;script&gt;
    window.klipse_settings = {
        selector_eval_ruby: &#39;.language-klipse-eval-ruby&#39;, // css selector for the html elements you want to klipsify
    };
&lt;/script&gt;

&lt;script src=&quot;http://cdn.opalrb.org/opal/current/opal.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;http://cdn.opalrb.org/opal/current/opal-parser.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;http://app.klipse.tech/plugin/js/klipse_plugin.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Wed, 22 Jun 2016 05:50:28 -0400</pubDate>
        <link>http://JesseWaites.com/embedding-interactive-ruby-snippets-into-web-pages/</link>
        <guid isPermaLink="true">http://JesseWaites.com/embedding-interactive-ruby-snippets-into-web-pages/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Data Visualization With D3</title>
        <description>&lt;p&gt;Lately, I‚Äôve been working on data visualizations at work. The idea is taking some data, whether it be
votes from an election, the data from your FitBit, or anything else, and using it to tell a
convincing story at a glance.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is a magic in graphs. The profile of a curve reveals in a Ô¨Çash a whole situation ‚Äî the life history of an epidemic, a panic, or an era of prosperity. The graph informs the mind, awakens the imagination,
convinces.&lt;/p&gt;

  &lt;p&gt;‚ÄïHenry D. Hubbard&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I‚Äôve been using a great javascript library called D3 and wanted to make a quick blog post to show off what the D3 library can do. D3 allows you full, custom control over the way your charts / graphs look and feel and you can even use common data structures like CSV (Like from an Excel file). The charts below are sample charts I‚Äôve pulled from other sources. Make sure to click, drag, and touch the graphs to trigger the animations.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;350&quot; src=&quot;//jsfiddle.net/enigmarm/3HL4a/13/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Click on the ‚ÄúSort‚Äù and ‚ÄúReset‚Äù buttons above to see the chart animation in action.&lt;/p&gt;

&lt;iframe width=&quot;550&quot; height=&quot;500&quot; src=&quot;//jsfiddle.net/JSDavi/qvco2Ljy/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;This one is a bit pointless but is pretty cool- Click and drag any of the circles above, drag it around, fling it across the screen‚Ä¶ Go nuts.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;//jsfiddle.net/augburto/YMa2y/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Click on any of the blue boxes above.&lt;/p&gt;

&lt;p&gt;Ok, that‚Äôs all for now. The next time you‚Äôre swamped with data at the office, consider using a
visualization library like D3 to let your data help you make a much more convincing case for
your argument.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 May 2016 05:50:28 -0400</pubDate>
        <link>http://JesseWaites.com/data-visualization-with-d3/</link>
        <guid isPermaLink="true">http://JesseWaites.com/data-visualization-with-d3/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Introducing the TwitterImageTag Rubygem</title>
        <description>&lt;p&gt;When I‚Äôm building a web application that is in the early prototype stage, I like to allow users to have profile pictures, but sometimes want to skip the process of actually building a mechanism (configuring Paperclip) to upload and store profile pictures so I can focus on something else.&lt;/p&gt;

&lt;p&gt;So I got to work on this, TwitterImageTag.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúTo invent, you need a good imagination and a pile of junk.‚Äù&lt;/p&gt;

  &lt;p&gt;Thomas Edison&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This gem allows you to easily add Twitter Avatar Images to your Ruby / Rails app views. Based on the Twitter v1.1 API, the primary usage would be for building out quick prototypes, or bypassing the need to have users upload their own avatar images. Ideally, you would have a field in your user onboarding form called ‚Äútwitter handle‚Äù, and call something like:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;%= TwitterImageTag.show_me(current_user.twitter_handle, &quot;normal&quot;) %&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This image pretty much explains it all:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9fru2jz.png&quot; alt=&quot;Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This takes 2 arguments - any valid twitter handle, and any of 4 size options:
‚Äúnormal‚Äù, ‚Äúbigger‚Äù, ‚Äúmini‚Äù, or ‚Äúoriginal‚Äù. The dimensions of the size options are:&lt;/p&gt;

&lt;p&gt;normal: 48 x 48 pixels.
bigger: 73 x 73 pixels.
mini:   24 x 24 pixels.
original: No idea.&lt;/p&gt;

&lt;p&gt;There‚Äôs no telling what the ‚Äúoriginal‚Äù image size will be. It is whatever
size the user uploaded.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Add this line to your application‚Äôs Gemfile:&lt;/p&gt;

&lt;p&gt;NOTE: Make sure you are using the latest version of this gem - it went under a significant rewrite at version 1.9.5 - Don‚Äôt use anything lower than that.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby
gem &#39;twitter_image_tag&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then execute:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or install it yourself as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install twitter_image_tag
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;pre&gt;
&amp;lt;%= TwitterImageTag.show_me(current_user.twitter_handle, &quot;normal&quot;) %&amp;gt;
&lt;/pre&gt;
&lt;p&gt;## Development&lt;/p&gt;

&lt;p&gt;After checking out the repo, run &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code class=&quot;highlighter-rouge&quot;&gt;rake false&lt;/code&gt; to run the tests. You can also run &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt;

&lt;p&gt;To install this gem onto your local machine, run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code class=&quot;highlighter-rouge&quot;&gt;version.rb&lt;/code&gt;, and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push the &lt;code class=&quot;highlighter-rouge&quot;&gt;.gem&lt;/code&gt; file to &lt;a href=&quot;https://rubygems.org&quot;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;Bug reports and pull requests are welcome on GitHub at https://github.com/piratebroadcast/twitter_image_tag.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 04:50:28 -0500</pubDate>
        <link>http://JesseWaites.com/introducing-the-twitter-image-tag-gem/</link>
        <guid isPermaLink="true">http://JesseWaites.com/introducing-the-twitter-image-tag-gem/</guid>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Adding Twitter Cards &amp; Facebook Cards to a Jekyll App</title>
        <description>&lt;p&gt;Twitter and Facebook Cards makes it possible to attach images to posts that automatically link to your content. LinkedIn also uses the same ‚ÄúOpen Graph‚Äù protocol that Facebook uses, so this will work for LinkedIn as well with no additional code needed.&lt;/p&gt;

&lt;p&gt;Cards are the difference between pasting a link that is just a link, or having Twitter, Facebook, or LinkedIn scrape for an article title, image, and description. These cards look very professional and studies have proved that they lead to increased content sharing. You would be surprised how many otherwise professional websites and web services overlook this trivial yet effective step. The image below will show you what a Twitter Card looks like - When displayed on Twitter on either a user page or in a feed, the entire image will serve as a clickable hyperlink to the page or post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/otUP8vj.png&quot; alt=&quot;twitter card validation&quot; title=&quot;twitter card validation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interestingly, I found what may be a bug in the Jekyll framework when writing this blog post - When pasting my code sample, a line of code such as ‚Äúpage.title‚Äù is being evaluated, so when I paste ‚Äúpage.title‚Äù, the output on the screen is the actual page title, in this case ‚ÄúAdding Twitter Cards &amp;amp; Facebook Cards to a Jekyll App‚Äù. This makes it difficult to share code with you but I found a workaround - I‚Äôll simply need to share this code as a Github Gist to skip all of that drama. The  code below is for a Jekyll app, but you should be able to convert this to your programming language of choice rather easily, provided that you have access to your page objects. The code is simple if/else conditional statements that should be trivial to convert to use in Django, Drupal, Ruby on Rails, et cetera.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/piratebroadcast/425724b1b5b75ae6c037.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Once you‚Äôve added the code to your site header and pushed those updates to your production server, you can preview what your Cards will look like by pasting a blog post link in the validators below. I should note that I have hardcoded the same image to display whenever any link is posted to my site - This way I always know that SOME image is present. I‚Äôm mostly writing about code anyway so having a dynamic image is not important to me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cards-dev.twitter.com/validator&quot;&gt;You can preview what your Twitter Card will look like by pasting a blog post link here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.facebook.com/tools/debug/og/object/&quot;&gt;You can preview your Facebook links here.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 04:50:28 -0500</pubDate>
        <link>http://JesseWaites.com/generating-twitter-cards-and-facebook-cards-in-a-jekyll-app/</link>
        <guid isPermaLink="true">http://JesseWaites.com/generating-twitter-cards-and-facebook-cards-in-a-jekyll-app/</guid>
        
        
        <category>coding</category>
        
      </item>
    
  </channel>
</rss>
